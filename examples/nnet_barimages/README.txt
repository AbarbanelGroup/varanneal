In this example, variational annealing (VA) is used to train a neural network 
with a single hidden layer on Sasha's bar image data.  This data consists of
"images" of vertical, horizontal, or diagonal white bars on a black 
background.  These images are also noisy, where (for now) the noise is i.i.d. 
for every pixel.

The data can be generated by running the "bardata_gen.py" script in the
data folder.  Modify the options at the top of the script to change the 
resolution of the images, what kinds of images to generate, etc.  You can, of 
course, go into the script and change the data at a lower level.  
Alternatively, you can use Sasha's iPython notebook in the data folder, which 
also has some code for viewing the images.

The network has three layers.  The input layer has dim*dim neurons, where dim 
is the side length (in pixels) of the input image.  The number of hidden 
layer neurons can be set by the user (default is 30).  The output layer has N_C 
neurons for the N_C classes.  By default, N_C = 4 (images are labeled as being 
either horizontal, vertical, or diagonal at 45 degrees in either direction).

To change the structure of the network, as well as other training/annealing 
parameters, edit the annealing script in this folder (bardata_anneal.py).  This 
is also the script that should be run with python2 to train the network.
